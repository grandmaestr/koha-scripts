#!/bin/bash
# ------------------------------------------------------------------
# Author: Lennon Mazonde
# GitHub: @grandmaestr
# Title: koha-database-migrate
# Description: 
# 	This script migrates your Koha database to another database server.
# 	You can copy and paste this script onto your server and make it executable by running "chmod a+x /path/to/file_name"
# 	To run the script, simply go to "/path/to/file_name" or if it's in your home directory, run "~/file_name" in the CLI.
# 	This script is interactive, so you'll be prompted for input at various stages.
# 	You can modify or use this script however you like but I'd really appreciate it if you give me a shout out or attribution if you post it elsewhere :)

# ------------------------------------------------------------------
set -x 
set -e

# Script version
VERSION=0.1.0
# Set the name of the script to variable
SCRIPT_NAME="$(basename ${0})"

# ------Help--------------------------------------------------------
Help(){
    # Display Help
    cat <<EOF
        Usage: $SCRIPT_NAME [options] 

        Options:
		d - The hostname, IP address or URL of the destination database.
		c - The IP or URL address of the client (running the Koha web server). If using a VPC in AWS, Azure, or GCP enter the **Private** IP of your EC2 instance. Defaults to localhost. 
 		h - help. Print this help.
		i - InstanceId. The name of the Koha instance.
		v - version. Print the script version.

        Example:
            $SCRIPT_NAME -i library -d mydb.123456789012.us-east-1.rds.amazonaws.com -c 172.16.78.121 
EOF
}

# --- Options processing -------------------------------------------
if [ $# == 0 ] ; then
    Help
    exit 1;
fi

while getopts ":d:c:h:i:v" optname; do
    case "$optname" in
		d) 
			hostname=("$OPTARG")
			;;
		c) 
			clientipaddr=("$OPTARG")
			;;
		h)
			Help
			exit 0;
			;;
		i) 
			instanceid=("$OPTARG")
			;;
		v)
			echo "Version $VERSION"
			exit 0;
			;;
		\?)
			echo "Unknown option $OPTARG"
			Help
			exit 0;
			;;
		:)
			echo "Error: you must provide an argument for option -$OPTARG"
			exit 0;
			;;
		*)
			echo "Unknown error while processing options"
			Help
			exit 0;
			;;
    esac
  done

shift $(($OPTIND - 1))

param1=$1
param2=$2

# --- Install remote db --------------------------------------------
MigrateDB(){

    # Retrieve the Koha user, password
    kohadbpwd=$(sudo xmlstarlet sel -t -v 'yazgfs/config/pass' $koha_conf)
    kohadbuser=$(sudo xmlstarlet sel -t -v 'yazgfs/config/hostname' $koha_conf)

    # Dump Koha database from the source db server
    mysqldump -u${kohadbuser} -p${kohadbpwd} --single-transaction --databases koha_$val  > /tmp/koha_$val.sql

    # Restore Koha database to destination db server
    mysql -h ${hostname} -u ${remotedbroot} -p${remotedbpass} < /tmp/koha_$val.sql

    koha-rebuild-zebra --full "$val"
}
# --- Install remote db --------------------------------------------
CreateRemoteKohaUserMySQL(){
	# Create Koha user in remote db server
    mysql -h ${hostname} -u ${remotedbroot} -p${remotedbpass} -e "
    CREATE USER IF NOT EXISTS 'koha_$val'@'${clientipaddr}' IDENTIFIED BY '${kohadbpwd}';
    GRANT ALL PRIVILEGES ON koha_$val.* to 'koha_$val'@'${clientipaddr}';
    FLUSH PRIVILEGES;"
}
# --- Install remote db aurora--------------------------------------
CreateRemoteKohaUserAurora(){
    mysql -h ${hostname} -u ${remotedbroot} -p${remotedbpass} -e "
	CREATE USER 'koha_${val}'@'${clientipaddr}' IDENTIFIED B}';
	GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES,
	CREATE VIEW, EVENT, TRIGGER, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EXECUTE ON koha_${val}.* to 'koha_${val}'@'${clientipaddr}'; FLUSH PRIVILEGES;"
}	
# --- Create koha-common.cnf --------------------------------------
CreateKohaCommon(){
	echo "
	[client]
	host     = ${hostname}
	user     = ${remotedbroot}
	password = ${remotedbpass}
	socket   = /var/run/mysqld/mysqld.sock
	[mysql_upgrade]
	host     = ${hostname}
	user     = ${remotedbroot}
	password = ${remotedbpass}
	socket   = /var/run/mysqld/mysqld.sock
	" | sudo tee /etc/mysql/koha-common.cnf >/dev/null 
}
# --- Locks -------------------------------------------------------
LOCK_FILE=/tmp/$SCRIPT_NAME.lock
if [ -f "$LOCK_FILE" ]; then
   echo "Script is already running"
   exit
fi

trap "rm -f $LOCK_FILE" EXIT
touch $LOCK_FILE

# --- Body --------------------------------------------------------

# Set the path to koha_conf.xml
koha_conf=/etc/koha/sites/$val/koha-conf.xml

# Prompt user for root user of the remote database server
echo "Enter the root user of the destination server:	" 
read -s remotedbroot

# Prompt user for password of the remote database server
echo  "Enter the password for destination server root user:	" 
read -s remotedbpass

# Dump and migrate Koha instance database from source to destination db server
MigrateDB

# Create Koha user in remote db server
CreateRemoteKohaUserMySQL

# Delete database dump in /tmp/
sudo rm -f /tmp/koha_$val.sql

# Replace database endpoint with remote db endpoint
sudo xmlstarlet edit -L --update 'yazgfs/config/hostname' --value "$hostname" $koha_conf

# Update koha-common.cnf with config for remote db
CreateKohaCommon

# Reload koha-common and memcached
sudo systemctl restart koha-common.service memcached.service

echo "Done"
