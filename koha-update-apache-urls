#!/bin/bash
# ------------------------------------------------------------------
# Author: Lennon Mazonde
# GitHub: @grandmaestr
# Title: koha-update-apache-urls
# Description: 
# 	This script configures the OPAC and Staff URL in the 
# 	Apache conf (/etc/apache2/sites-enabled/) file for your Koha instance
# 	You will need to configure Apache config files (/etc/apache2/sites-enabled/)
# 	You can copy and paste this script onto your server and make it executable by running "chmod a+x /path/to/file_name"
# 	To run the script, simply go to "/path/to/file_name" or if it's in your home directory, run "~/file_name" in the CLI.
# 	This script is interactive, so you'll be prompted for input at various stages.
# 	You can modify or use this script however you like but I'd really appreciate it if you give me a shout out or attribution if you post it elsewhere :)

# License: MIT License

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ------------------------------------------------------------------

#!/bin/bash

# Script version
VERSION="0.1.0"

# Set the name of the script to variable
SCRIPT_NAME=$(basename "$0")

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# ------Help--------------------------------------------------------
Help() {
    # Display Help
    cat <<EOF
Usage: $SCRIPT_NAME -i instanceid [OPTIONS]

Options:
  -i instanceid: The name of the koha instance. One instance id per option.
  -h, --help: Print this help.
  -v, --version: Print the script version.

Example:
  To define a new staff or OPAC url for a single instance called "library", run:
    $SCRIPT_NAME -i library
  For multiple instances, run:
    $SCRIPT_NAME -i library1 -i library2 ...
EOF
}

# Print error message in red color
Error() {
    echo -e "${RED}[Error] $1${NC}"
}

# --- Backup Original Config -------------------------------------
Backup() {
    # copy koha-conf.xml to tmp in case you need to restore
    config_backup="/tmp/$1.conf.bkp-$(date +%d-%m-%Y-%Hh%Mm%Ss)"
    if ! sudo cp "$2" "$config_backup"; then
        Error "Failed to backup the original config file for $1"
        exit 1
    fi
}

# --- Restore Original Config -------------------------------------
Restore() {
    # restore original config from backup
    if ! sudo cp "$1" "$2"; then
        Error "Failed to restore the original config file for $2"
        exit 1
    fi
}

# --- Locks -------------------------------------------------------
LOCK_FILE="/tmp/$SCRIPT_NAME.lock"
if [ -f "$LOCK_FILE" ]; then
   Error "Script is already running"
   exit 1
fi

trap "rm -f $LOCK_FILE" EXIT
touch "$LOCK_FILE"

# --- Body --------------------------------------------------------

# --- Options processing -------------------------------------------
instance_ids=()
while [[ $# -gt 0 ]]; do
    opt="$1"
    case $opt in
        -i)
            instance_ids+=("$2")
            shift
            shift
            ;;
        -h|--help)
            Help
            exit 0
            ;;
        -v|--version)
            echo "Version $VERSION"
            exit 0
            ;;
        *)
            Error "Unknown option: $opt"
            Help
            exit 1
            ;;
    esac
done

if [[ ${#instance_ids[@]} -eq 0 ]]; then
    Error "At least one instance id is required"
    Help
    exit 1
fi

for instance_id in "${instance_ids[@]}"; do
    config_path="/etc/apache2/sites-enabled/$instance_id.conf"

    # Check if the config file exists
    if [[ ! -f "$config_path" ]]; then
        Error "Config file not found: $config_path"
        continue
    fi

    # Set initial variables to null
    opac=""
    staff=""
    restore_original_config="no"

    while true; do
        read -rp "Update $config_path? (yes/no/quit): " response 

        case $response in
            [yY][eE][sS]|[yY])
                if [[ "$restore_original_config" == "yes" ]]; then
                    # Restore the original config
                    Restore "$config_backup" "$config_path"
                    restore_original_config="no"
                    continue
                fi
				# Backup original config
				Backup "$instance_id" "$config_path"

				# Prompt user to enter their Staff URL
				read -rp "New Staff/admin page url for $instance_id (Leave out the leading http:// or https://): " staffdomain

				# Prompt user to enter their OPAC domain/subdomain
				read -rp "New OPAC url for $instance_id (Leave out the leading http:// or https://): " opacdomain

				# Strip out leading http(s):// and set to variable
				staffurl=$(echo "$staffdomain" | sed "s|.*://||; s|/.*||" )
				staff+=" ${staffurl}"

				# Strip out leading http(s):// and set to variable
				opacurl=$(echo "$opacdomain" | sed "s|.*://||; s|/.*||" )
				opac+=" ${opacurl}"

				# Replace ServerName with Staff URL
				if [[ -z ${staffurl} ]]; then
					echo "ServerName not specified, not setting"
				else
					if ! sudo sed -i "/ServerName*/c\\   ServerName $staffurl" "$config_path"; then
						Error "Failed to set the ServerName to $staffurl in $config_path"
						restore_original_config="yes"
						continue
					fi
				fi

				# Replace *ServerName with OPAC URL
				if [[ -z ${opacurl} ]]; then
					echo "ServerName not specified, not setting"
				else
					if ! sudo sed -i "0,/ServerName $staffurl/s//ServerName $opacurl/" "$config_path"; then
						Error "Failed to set the ServerName to $opacurl in $config_path"
						restore_original_config="yes"
						continue
					fi
				fi

				# Print new conf file
				printf "${GREEN}##########################Begin Config##########################${NC}\n\n"
				sudo cat "$config_path"
				printf "${GREEN}##########################End Config############################${NC}\n\n"

				# Prompt to restore original config or restart
				while true; do
					read -rp "Do you want to restore the original config or restart the config file update? (restore/restart/quit): " response 
					case $response in
						[rR][eE][sS][tT][aA][rR][tT]|[rR])
							break 2
							;;
						[rR][eE][sS][tT][oO][rR][eE]|[rR])
							restore_original_config="yes"
							break
							;;
						[qQ][uU][iI][tT]|[qQ])
							exit
							;;
						*)
							echo "Invalid response. Try again."
							;;
					esac
				done
				;;
			[nN][oO]|[nN])
				printf "${GREEN}No changes have been made.${NC}\n"
				break
				;;
			[qQ][uU][iI][tT]|[qQ])
				exit
				;;
			*)
				echo "Invalid response. Try again."
				;;
		esac
	done
done