#!/bin/bash

usage() {
  echo "Usage: $0 -k KOHA_INSTANCE [-s CN_SERVER] [-c CN_CLIENT] [-d DAYS]"
  echo
  echo "Options:"
  echo "  -k KOHA_INSTANCE   Name of the Koha instance (required)"
  echo "  -s CN_SERVER       Common Name for the server certificate (default: myrabbitmq-server)"
  echo "  -c CN_CLIENT       Common Name for the client certificate (default: myrabbitmq-client)"
  echo "  -d DAYS            Number of days the certificates are valid (default: 3650)"
  exit 1
}

# Default values
CN_SERVER="myrabbitmq-server"
CN_CLIENT="myrabbitmq-client"
DAYS=3650
KOHA_INSTANCE=""

# Parse options
while getopts ":s:c:d:k:" opt; do
  case $opt in
    s)
      CN_SERVER="$OPTARG"
      ;;
    c)
      CN_CLIENT="$OPTARG"
      ;;
    d)
      DAYS="$OPTARG"
      ;;
    k)
      KOHA_INSTANCE="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      ;;
  esac
done

if [ -z "$KOHA_INSTANCE" ]; then
  echo "Error: Koha instance name is required"
  usage
fi

koha_conf="/etc/koha/sites/$KOHA_INSTANCE/koha-conf.xml"

# Update and install packages
sudo apt update
sudo apt install -y rabbitmq-server openssl xmlstarlet

# Generate self-signed certificates
CERT_DIR=/etc/rabbitmq/tls
sudo mkdir -p $CERT_DIR
cd $CERT_DIR
sudo openssl genrsa -out ca_key.pem 2048
sudo openssl req -x509 -new -nodes -key ca_key.pem -days $DAYS -out ca_cert.pem -subj "/CN=$CN_SERVER"
sudo openssl genrsa -out server_key.pem 2048
sudo openssl req -new -key server_key.pem -out server.csr -subj "/CN=$CN_SERVER"
sudo openssl x509 -req -in server.csr -CA ca_cert.pem -CAkey ca_key.pem -CAcreateserial -out server_cert.pem -days $DAYS

# Generate client certificate
sudo openssl genrsa -out client_key.pem 2048
sudo openssl req -new -key client_key.pem -out client.csr -subj "/CN=$CN_CLIENT"
sudo openssl x509 -req -in client.csr -CA ca_cert.pem -CAkey ca_key.pem -CAcreateserial -out client_cert.pem -days $DAYS

# Set ownership and permissions
sudo chown -R rabbitmq:rabbitmq $CERT_DIR
sudo chmod 640 $CERT_DIR/*.pem
sudo chmod 600 $CERT_DIR/client_key.pem

# Configure RabbitMQ to use TLS and require client certificates
sudo bash -c "cat > /etc/rabbitmq/rabbitmq.conf << EOL
listeners.ssl.default = 5671
ssl_options.cacertfile = $CERT_DIR/ca_cert.pem
ssl_options.certfile = $CERT_DIR/server_cert.pem
ssl_options.keyfile = $CERT_DIR/server_key.pem
ssl_options.verify = verify_peer
ssl_options.fail_if_no_peer_cert = true
EOL"

# Restart RabbitMQ
sudo systemctl restart rabbitmq-server

# Update koha configuration
sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/hostname' --value "localhost" $koha_conf
sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/port' --value "5671" $koha_conf
sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/username' --value "guest" $koha_conf
sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/password' --value "guest" $koha_conf

Verify TLS configuration and client authentication
echo "Testing TLS configuration and client authentication:"
sudo openssl s_client -connect localhost:5671 -CAfile $CERT_DIR/ca_cert.pem -cert $CERT_DIR/client_cert.pem -key $CERT_DIR/client_key.pem

echo "Testing TLS configuration and client authentication:"
sudo openssl s_client -connect localhost:5671 -CAfile $CERT_DIR/ca_cert.pem -cert $CERT_DIR/client_cert.pem -key $CERT_DIR/client_key.pem

echo "Testing TLS configuration and client authentication:"
sudo openssl s_client -connect localhost:5671 -CAfile $CERT_DIR/ca_cert.pem -cert $CERT_DIR/client_cert.pem -key $CERT_DIR/client_key.pem
