#!/bin/bash
set -euox pipefail

# Usage message
usage() {
    echo "Usage: enable-tls-for-rabbitmq.sh [-h] [--cert-dir <directory>] [--cert-password <password>] [--instance <instance>...]"
    echo ""
    echo "Enable TLS for RabbitMQ by generating certificates and updating the configuration file."
    echo ""
    echo "Options:"
    echo "  -h, --help                     Display this help message."
    echo "      --cert-dir <directory>     Directory to store the generated certificates (default: /etc/rabbitmq/ssl)"
    echo "      --cert-password <password> Password for the private key (default: bunnies)"
    echo "      --instance <instance>...   Name of the Koha instance(s) for which to configure RabbitMQ."
    echo ""
}

# Default values
CERT_DIR="/etc/rabbitmq/ssl"
CERT_PASSWORD="bunnies"
INSTANCE=()

# Parse options and arguments
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -h|--help)
            usage
            exit 0
            ;;
        -d|--cert-dir)
            CERT_DIR="$2"
            shift
            shift
            ;;
        -p|--cert-password)
            CERT_PASSWORD="$2"
            shift
            shift
            ;;
        -i|--instance)
            INSTANCE+=("$2")
            shift
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo ""
            usage
            exit 1
            ;;
    esac
done

# Check if instance option is provided
if [ ${#INSTANCE[@]} -eq 0 ]; then
    echo "Error: --instance option is required."
    echo ""
    usage
    exit 1
fi

while true; do
  read -p "Backup all your Koha instances? This step is strongly recommended. (y/n/q): " response
    case $response in
      [yY][eE][sS]|[yY] )
        printf "Running backup. Please be patient.\n"
        sudo koha-run-backups >/dev/null 2>&1
        printf "Backup complete\n"
        break;;
    [nN][oO]|[nN] )
      printf "Skipping backup.\n"
      break;;
    [qQ][uU][iI][tT] | [qQ] )
      exit;;
      * )
      echo "Invalid response. Try again.";;
    esac
done

# Clone the tls gen repo 
tls_repo_path=/tmp/tls-gen
if [ -d "$tls_repo_path" ]; then
  rm -rf "$tls_repo_path"
fi
git clone https://github.com/rabbitmq/tls-gen $tls_repo_path
cd $tls_repo_path/basic

# Generate private key password
make PASSWORD="$CERT_PASSWORD" >/dev/null 2>&1
make verify >/dev/null #2>&1
make info >/dev/null #2>&1
ls -l ./result

# Rename and move generated cert files
cd ./result
sudo mkdir -p "$CERT_DIR"
sudo chmod 0750 $CERT_DIR 
sudo mv server*key.pem $CERT_DIR/server_key.pem
sudo mv server*certificate.pem $CERT_DIR/server_certificate.pem
sudo mv ca_certificate.pem $CERT_DIR

# Set correct permissions and owndership
sudo chmod 640 "$CERT_DIR/server_key.pem"
sudo chmod 640 "$CERT_DIR/server_certificate.pem"
sudo chmod 640 "$CERT_DIR/ca_certificate.pem"
sudo chown -R rabbitmq:rabbitmq $CERT_DIR

# Generate a random password
rabbit_pass=$(openssl rand -base64 16)

# Update RabbitMQ configuration file
sudo tee /etc/rabbitmq/rabbitmq.conf <<EOF
ssl_options.cacertfile = $CERT_DIR/ca_certificate.pem
ssl_options.certfile   = $CERT_DIR/server_certificate.pem
ssl_options.keyfile    = $CERT_DIR/server_key.pem
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert = true

# Listen on localhost only
stomp.listeners.tcp.1 = 127.0.0.1:61613
stomp.listeners.tcp.2 = ::1:61613

# default TLS-enabled port for STOMP connections
stomp.listeners.ssl.1 = 61614

# Change the default user and password
stomp.default_user = guest
stomp.default_pass = guest
EOF

# Enable STOMPl
sudo rabbitmq-plugins enable rabbitmq_stomp

# # Update the RabbitMQ password and username in koha-conf.xml
# for instancename in "${INSTANCE[@]}"; do
# # Set the path to koha_conf.xml
# koha_conf="/etc/koha/sites/$instancename/koha-conf.xml"

# sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/username' --value "koha_rabbitmq" $koha_conf
# sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/password' --value "$rabbit_pass" $koha_conf
# sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/port' --value "61614" $koha_conf
# done

# Restart RabbitMQ service

sudo systemctl restart rabbitmq-server.service

if sudo openssl s_client -connect localhost:61613 -tls1_2 | grep -q "Verification: OK"; then
echo "TLS is enabled for RabbitMQ on port 61613."
else
echo "TLS failed for RabbitMQ on port 61613."
fi

if sudo openssl s_client -connect localhost:61614 -tls1_2 | grep -q "Verification: OK"; then
echo "TLS is enabled for RabbitMQ on port 61614."
else
echo "TLS failed for RabbitMQ on port 61614."
fi

# Clean up

tls_repo_path=/tmp/tls-gen
if [ -d "$tls_repo_path" ]; then
  rm -rf "$tls_repo_path"
fi