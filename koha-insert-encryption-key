#!/bin/bash
# ------------------------------------------------------------------
# Author: Lennon Mazonde
# GitHub: @grandmaestr
# Title: koha-insert-encryption-key
# Description: 
# 	This script inserts a missing encryption_key element in koha-conf.xml or updates it if one already exists.
# 	You can copy and paste this script onto your server and make it executable by running "chmod a+x /path/to/file_name"
# 	To run the script, simply go to "/path/to/file_name" or if it's in your home directory, run "file_name"  in the CLI.
# 	This script is interactive, so you'll be prompted for input at various stages.
# 	You can modify or use this script however you like but I'd really appreciate it if you give me a shout out or attribution if you post it elsewhere :)
set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

# Script name and version
SCRIPT_NAME=$(basename "$0")
VERSION="1.0.0"

# Help function
Help() {
  echo -e "Usage: ${SCRIPT_NAME} [-i instanceid] [-h] [-v]\n"
  echo -e "Options:"
  echo -e "${YELLOW} -i${NC}    The name of the Koha instance. One instance id per option."
  echo -e "${YELLOW} -h${NC}    Print this help."
  echo -e "${YELLOW} -v${NC}    Print the script version.\n"
  echo -e "Examples:"
  echo -e "To define a new staff or OPAC URL for a single instance called ${GREEN}\"library\"${NC}, run:"
  echo -e "  ${GREEN}${SCRIPT_NAME} -i library${NC}"
  echo -e "For multiple instances, run:"
  echo -e "  ${GREEN}${SCRIPT_NAME} -i library1 -i library2 ...${NC}"
}

# Function to check if config file exists
CheckConfigFile() {
  local configpath="/etc/koha/sites/$1/koha-conf.xml"

  if [ ! -f "$configpath" ]; then
    echo -e "${RED}Error: $configpath does not exist.${NC}"
    read -rp "Please enter a valid instance name, or enter 'q' to quit: " val

    if [ "$val" = "q" ]; then
      echo -e "${RED}Exiting...${NC}"
      exit 1
    else
      CheckConfigFile "$val"
    fi
  fi
}

# Options processing
while getopts ":i:vh" optname; do
  case "$optname" in
    v)
      echo "Version $VERSION"
      exit 0;
      ;;
    i)  
      instanceid+=("$OPTARG")
      ;;
    h)
      Help
      exit 0;
      ;;
    \?)
      echo -e "${RED}Unknown option $OPTARG${NC}"
      Help
      exit 1;
      ;;
    :)
      echo -e "${RED}Error: you must provide at least one instance name for option -$OPTARG${NC}"
      Help
      exit 1;
      ;;
    *)
      echo -e "${RED}Unknown error while processing options${NC}"
      Help
      exit 1;
      ;;
  esac
done

# Check if instanceid array is empty
if [ ${#instanceid[@]} -eq 0 ]; then
  echo -e "${RED}Error: you must provide at least one instance name${NC}"
  Help
  exit 1
fi

# Backup Original Config
Backup() {
  config_backup="/tmp/$val.koha-conf.xml.bkp-$(date +%d-%m-%Y-%Hh%Mm%Ss)"
  sudo cp "$configpath" "$config_backup"
}

# Restore Original Config
Restore() {
  sudo cp "$config_backup" "$configpath"
}

# Locks
LOCK_FILE="/tmp/$SUBJECT.lock"
if [ -f "$LOCK_FILE" ]; then
  echo -e "${RED}Script is already running${NC}"
  exit 1
fi

trap "rm -f $LOCK_FILE" EXIT
touch "$LOCK_FILE"

# Set path to koha-conf.xml
configpath=""

# Body
for val in "${instanceid[@]}"; do
  CheckConfigFile "$val"

  # Set path to koha-conf.xml
  configpath="/etc/koha/sites/$val/koha-conf.xml"

  # Check if encryption key element exists
	if [ "$(sudo xmlstarlet sel -t -v "count(yazgfs/config/encryption_key)" "$configpath")" -eq "0" ]; then
		echo -e "${YELLOW}Encryption key not found. Adding new encryption key...${NC}"
		sleep 1s
		# Backup the original config file
		Backup

		# Generate encryption key and set to variable
		keyvalue=$(pwgen 32 -1)

		# Insert new encryption key element
		sudo xmlstarlet ed -L -P -s "/yazgfs/config" -t elem -n encryption_key -v "$keyvalue" "$configpath"

		# Prompt to restore original config
		echo -e "${GREEN}The koha-conf.xml file for $val has been updated.${NC}"
		read -rp "Do you want to restore the original file? (yes/no): " response
		case $response in
		[yY][eE][sS]|[yY])
			Restore
			echo -e "${GREEN}The original config has been restored.${NC}"
			;;
		[nN][oO]|[nN])
			echo -e "${GREEN}Changes kept.${NC}"
			;;
		*)
			echo -e "${RED}Invalid response.${NC}"
			;;
		esac
		else
			echo -e "${YELLOW}Encryption key exists.${NC}"
			read -rp "Do you want to update it? (yes/no): " response
			case $response in
			[yY][eE][sS]|[yY])
			echo -e "${YELLOW}Updating encryption key...${NC}"
			sleep 1s
			
			# Backup the original config file
			Backup

			# Generate encryption key and set to variable
			keyvalue=$(pwgen 32 -1)

			# Replace encryption key with new value
			sudo xmlstarlet ed -L -u "/yazgfs/config/encryption_key" -v "$keyvalue" "$configpath"
			echo -e "${GREEN}The encryption key has been updated.${NC}"
			;;
		[nN][oO]|[nN])
			echo -e "${GREEN}No changes have been made.${NC}"
			;;
		*)
			echo -e "${RED}Invalid response.${NC}"
			;;
		esac
	fi
	echo -e "#################################################################\n"
	echo -e "If you encountered problems, you can find the timestamped backup config file here: ${GREEN}$config_backup${NC}.\n"
done