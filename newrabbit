#!/bin/bash
show_help() {
  echo "Usage: $0 -i KOHA_INSTANCE -d CERT_DIR"
  echo
  echo "Options:"
  echo "  -i KOHA_INSTANCE   Name of the Koha instance (required)"
  echo "  -d CERT_DIR        Path to the directory containing the certificates (default: /etc/rabbitmq/tls)"
  echo
  echo "This script enables TLS on RabbitMQ and updates Koha configuration to use it."
}

# Parse command line options
while getopts ":i:d:h" opt; do
  case $opt in
    i) KOHA_INSTANCE="$OPTARG" ;;
    d) CERT_DIR="$OPTARG" ;;
    h) show_help; exit 0 ;;
    \?) echo "Invalid option: -$OPTARG" >&2; show_help; exit 1 ;;
    :) echo "Option -$OPTARG requires an argument." >&2; show_help; exit 1 ;;
  esac
done

if [ -z "$KOHA_INSTANCE" ]; then
  echo "Error: Koha instance name is required." >&2
  show_help
  exit 1
fi

CERT_DIR=${CERT_DIR:-/etc/rabbitmq/tls}
KOHA_CONF="/etc/koha/sites/$KOHA_INSTANCE/koha-conf.xml"


# Update and install packages
sudo apt update
sudo apt install -y rabbitmq-server openssl

# Generate self-signed certificates
sudo mkdir -p $CERT_DIR
cd $CERT_DIR
sudo openssl genrsa -out ca_key.pem 2048
sudo openssl req -x509 -new -nodes -key ca_key.pem -days $DAYS -out ca_cert.pem -subj "/CN=$CN_SERVER"
sudo openssl genrsa -out server_key.pem 2048
sudo openssl req -new -key server_key.pem -out server.csr -subj "/CN=$CN_SERVER"
sudo openssl x509 -req -in server.csr -CA ca_cert.pem -CAkey ca_key.pem -CAcreateserial -out server_cert.pem -days $DAYS

# Generate client certificate
sudo openssl genrsa -out client_key.pem 2048
sudo openssl req -new -key client_key.pem -out client.csr -subj "/CN=$CN_CLIENT"
sudo openssl x509 -req -in client.csr -CA ca_cert.pem -CAkey ca_key.pem -CAcreateserial -out client_cert.pem -days $DAYS

# Set ownership and permissions
sudo chown -R rabbitmq:rabbitmq $CERT_DIR
sudo chmod 640 $CERT_DIR/*.pem
sudo chmod 600 $CERT_DIR/client_key.pem


# Configure RabbitMQ to use TLS and require client certificates
sudo bash -c "cat > /etc/rabbitmq/rabbitmq.conf << EOL
listeners.ssl.default = 5671
ssl_options.cacertfile = $CERT_DIR/ca_cert.pem
ssl_options.certfile = $CERT_DIR/server_cert.pem
ssl_options.keyfile = $CERT_DIR/server_key.pem
ssl_options.verify = verify_peer
ssl_options.fail_if_no_peer_cert = true
EOL"


# Update Koha configuration
sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/username' --value "guest" "$KOHA_CONF"
sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/password' --value "guest" "$KOHA_CONF"
sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/port' --value "5671" "$KOHA_CONF"
sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/tls/ca_cert' --value "$CERT_DIR/ca_cert.pem" "$KOHA_CONF"
sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/tls/client_cert' --value "$CERT_DIR/client_cert.pem" "$KOHA_CONF"
sudo xmlstarlet edit -L --update 'yazgfs/config/message_broker/tls/client_key' --value "$CERT_DIR/client_key.pem" "$KOHA_CONF"

echo "Koha configuration updated successfully."

# Restart RabbitMQ
sudo systemctl restart rabbitmq-server

# Verify TLS configuration and client authentication

echo "Testing TLS configuration and client authentication:"
sudo openssl s_client -connect localhost:5671 -CAfile $CERT_DIR/ca_cert.pem -cert $CERT_DIR/client_cert.pem -key $CERT_DIR/client_key.pem

echo "Testing TLS configuration and client authentication:"
sudo openssl s_client -connect localhost:5671 -CAfile $CERT_DIR/ca_cert.pem -cert $CERT_DIR/client_cert.pem -key $CERT_DIR/client_key.pem

echo "Testing TLS configuration and client authentication:"
sudo openssl s_client -connect localhost:5671 -CAfile $CERT_DIR/ca_cert.pem -cert $CERT_DIR/client_cert.pem -key $CERT_DIR/client_key.pem
